<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Inline SVG Pushpin Template - Bing Maps Samples</title>
        <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <meta name="description" content="This sample shows how to use an inline SVG as a template for a pushpin." />
        <meta name="keywords" content="Microsoft maps, map, gis, API, SDK, Bing, Bing Maps" />
        <meta name="author" content="Microsoft Bing Maps" />
        <meta name="screenshot" content="screenshot.jpg" />
        <script src="https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=AkMdzF1Q7JCJCXj3415UZvH4JYRCJihZ_W7JEOnpx6eH5Hwtt1qie1LQqIrJ7-jS" async defer is:inline></script>
    </head>
    <body>
        <div id="myMap" style="position:relative;width:100%;min-width:290px;height:600px;background-color:gray"></div><br/>
        <input type="button" value="Change Color" onclick="ChangeColor()"/>
        <input type="button" value="Change Text" onclick="ChangeText()" />
        <fieldset style="width:800px;margin-top:10px;">
            <legend>Inline SVG Pushpin Template Sample</legend>
            This sample shows how to use an inline SVG as a template for a pushpin. Pushpins have a color and text property. 
            You can add placeholders for these properties in your inline SVG by using {'color'}\ and {'text'}.
        </fieldset>
        <script>
            var map, pin;

            function GetMap() {
                map = new Microsoft.Maps.Map('#myMap', {});


                //Create custom Pushpin using an SVG string.
                pin = new Microsoft.Maps.Pushpin(map.getCenter(), {
                    icon: '<svg xmlns="https://www.w3.org/2000/svg" width="30" height="30"><circle cx="15" cy="15" r="13" stroke="black" stroke-width="2" fill="{color}"/><text x="15" y="20" text-anchor="middle">{text}</text></svg>',
                    color: 'yellow',
                    text: '1',
                    anchor: new Microsoft.Maps.Point(20, 20)
                });


                //Add the pushpin to the map.
                map.entities.push(pin);
            }


            function ChangeColor() {
                //Get a random color and update the pushpin.
                var c = Microsoft.Maps.TestDataGenerator.getColor();
                pin.setOptions({ color: c });
            }


            function ChangeText() {
                //Generate a random number and update the pushpin.
                var num = Math.round(Math.random() * 99);
                pin.setOptions({text: num.toString() });
            }
        </script>
    </body>
</html>